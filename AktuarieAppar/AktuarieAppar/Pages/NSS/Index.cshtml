@page
@model AktuarieAppar.Pages.NSS.IndexModel


@{
    ViewData["Title"] = "NSS";
}

<h3>
    DISCLAIMER: Otestade appar under utveckling
    <span style="color:Tomato;"> ABSOLUTELY NO WARRANTY</span> ¯\_(ツ)_/¯
</h3>

<form>
    <p>
        Räntedatum:
        <select asp-for="ValueDate"
                asp-items="Model.ValueDates"
                onchange="submit();"></select>
    </p>
</form>

@if (Model.Simulation)
{
    <partial name="_PartialParametersForm" model="Model" />
}
else
{
    <partial name="_PartialParameters" model="Model" />
}


<h2>Swapräntor per @Model.ValueDate.ToShortDateString()</h2>

<table class="table">
    <thead>
        <tr>
            <th>
                Maturity
            </th>
            <th>
                Quote
            </th>
            <th>
                FI (FFFS2013:23)
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.SwapQuotes)
        {
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Key)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Value)
                    </td>
                    <td>
                        @(100 * Model.FiRates[item.Key])
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div id="combo" style="width: 800px; height: 500px;"></div>
<partial name="_PartialNSStable" model="Model" />
<br />
@if (!Model.Simulation)
{
    <partial name="_PartialLabanPOST" model="Model" />
}

<p>Med startgissningen tagen från föregående månad; kan ändras efter behag</p>
<partial name="_PartialNSSForm" model="Model" />

<div id="nss" style="width: 800px; height: 500px;"></div>
<div id="res" style="width: 800px; height: 500px;"></div>

@if (Model.Simulation)
{
    <partial name="_PartialBootstrapTable" model="Model" />
    <div id="bootstrap" style="width: 800px; height: 500px;"></div>
}


<table class="table">
    <thead>
        <tr>
            <th>
                Maturity
            </th>
            <th>
                Tjänste
            </th>
            <th>
                Tjänste (NSS)
            </th>
            <th>
                Privat
            </th>
            <th>
                Privat (NSS)
            </th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.timesteps.Length; i++)
        {
            <tr>
                <td>
                    @Model.timesteps[i]
                </td>
                <td>
                    @Model.deltasTJ[i]
                </td>
                <td>
                    @Model.deltasNSSTJ[i]
                </td>
                <td>
                    @Model.deltasPR[i]
                </td>
                <td>
                    @Model.deltasNSSPR[i]
                </td>
            </tr>
        }
    </tbody>
</table>


@section scripts {
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { packages: ['corechart'] });
    </script>
    <script type="text/javascript">


    function drawSwapQuoteCombo() {
        // Create and populate the data table.
        var data1 = google.visualization.arrayToDataTable([
            ['Maturity', 'Par', 'FI2013:23','Förändring'],
            @foreach (var p in Model.SwapQuotes)
            {
                <text>[@p.Key, @p.Value, @(100*Model.FiRates[p.Key]), @(100*Model.FiRateChange(p.Key))],</text>
            }
        ]);

        var options = {
          title: 'Med förändring från förra månadsskiftet',
          curveType: "function",
          width: 800, height: 500,
          seriesType: 'line',
            series: {
                0: { pointSize: 10, pointShape: { type: 'star', sides: 4 }, lineWidth: 0.2},
                2: { type: 'bars' }
            },
            colors: ['#6f9654', '#4374e0', '#808080'],
          vAxis: { title: '%' },
        };

        // Create and draw the visualization.
        new google.visualization.ComboChart(document.getElementById('combo')).
            draw(data1, options);
        }


    function drawDeltaNSS() {
        // Create and populate the data table.
        var data2 = google.visualization.arrayToDataTable([
            ['Maturity', 'Tjänste(NSS)', 'Tjänste', 'Privat(NSS)', 'Privat'],
            @for (int i=0; i < Model.timesteps.Length; i++)
            {
                <text>[@Model.timesteps[i], @Model.deltasNSSTJ[i], @Model.deltasTJ[i],
                       @Model.deltasNSSPR[i], @Model.deltasPR[i]], </text>
            }
        ]);

        var options = {
            title: 'Anpassad Nelson-Siegel-Svensson',
            curveType: "function",
            width: 800, height: 500,
            series: {
                1: { lineDashStyle: [2, 2] },
                3: { lineDashStyle: [2, 2] },
            },
            colors: ['#4374e0', '#4374e0', '#e2431e', '#e2431e'],
            vAxis: { title: '\u03B4' },
        };

        // Create and draw the visualization.
        new google.visualization.LineChart(document.getElementById('nss')).
            draw(data2, options);
        }

        function drawResidual() {
        // Create and populate the data table.
        var data3 = google.visualization.arrayToDataTable([
            ['Maturity', 'Tjänste', 'Privat'],
            @for (int i=0; i < Model.timesteps.Length; i++)
            {
                <text>[@Model.timesteps[i], @Model.Residual(i, "tj"), @Model.Residual(i, "pr")],</text>
            }
        ]);

        var options = {
          title: 'NSS residual',
          curveType: "none",
          width: 800, height: 500,
          colors: ['#4374e0', '#e2431e'],
        };

        // Create and draw the visualization.
        new google.visualization.LineChart(document.getElementById('res')).
            draw(data3, options);
        }

        function drawBootstrap() {
        // Create and populate the data table.
        var data2 = google.visualization.arrayToDataTable([
            ['Maturity', 'Par', 'ZC'],
            @for (int i=1; i < 21; i++)
            {
                if (@Model.debugPar[i-1] < 1)
                {
                    <text>[@Model.timesteps[i], @(100*Model.debugPar[i-1]), @(100*Model.debugZC[i-1])], </text>
                }

                else
                {
                    <text>[@Model.timesteps[i], null, @(100*Model.debugZC[i-1])], </text>
                }
            }
        ]);

        var options = {
          title: 'Swap curve',
          curveType: "none",
          width: 800, height: 500,
          series: {
              0: { pointSize: 15, pointShape: { type: 'star', sides: 4 }, lineWidth: 0},
              1: { pointSize: 5, },
            },
            colors: ['#e2431e', '#4374e0'],
          vAxis: { title: '%' },
        };

        // Create and draw the visualization.
        new google.visualization.LineChart(document.getElementById('bootstrap')).
            draw(data2, options);
        }

        google.charts.setOnLoadCallback(drawSwapQuoteCombo);
        google.charts.setOnLoadCallback(drawDeltaNSS);
        google.charts.setOnLoadCallback(drawResidual);
        google.charts.setOnLoadCallback(drawBootstrap);
    </script>
}

<h3>
    DISCLAIMER: Otestade appar under utveckling
    <span style="color:Tomato;"> ABSOLUTELY NO WARRANTY</span> ¯\_(ツ)_/¯
</h3>
<h3>TODO</h3>

<p>- Refactoring</p>
<p>- Refactoring</p>
<p>- Stabilisera OptimizeNSS</p>
<p>- Code review .NET</p>
<p>- Användartest Aktuarie</p>
<p>- Vy till DW_Martar</p>
<p>- pre-EOD 17:00</p>
<p>- Parametrar i databas</p>
<p>- Räntestress (Simulering)</p>
<p>- Nelder-Mead i F#</p>
<p>- Frekvens månad/år</p>
<p>- Filimport</p>
<p>- Consistencychecks</p>
<p>- Exceptions</p>
<p>- async</p>







