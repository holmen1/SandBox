.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_munich.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_munich.py:


=========================
Munich Adjustment Example
=========================

This example demonstrates how to adjust LDFs by the relationship between Paid
and Incurred using the MunichAdjustment.
.



.. image:: /auto_examples/images/sphx_glr_plot_munich_001.png
    :alt: Munich Chainladder, P/I Ratio Comparison
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\jboga\onedrive\documents\github\chainladder-python\chainladder\development\munich.py:54: UserWarning: paid_to_incurred dict argument is deprecated, use tuple instead
      warnings.warn("paid_to_incurred dict argument is deprecated, use tuple instead")

    [Text(0, 0.5, 'Paid Ultimate / Incurred Ultimate'), Text(0.5, 0, 'Accident Year')]





|


.. code-block:: default


    import chainladder as cl
    import pandas as pd
    import matplotlib.pyplot as plt

    # Load data
    mcl = cl.load_sample('mcl')
    # Volume weighted (default) LDFs
    dev = cl.Development().fit_transform(mcl)
    # Traditional Chainladder
    cl_traditional = cl.Chainladder().fit(dev).ultimate_
    # Munich Adjustment
    dev_munich = cl.MunichAdjustment(paid_to_incurred={'paid':'incurred'}).fit_transform(dev)
    cl_munich = cl.Chainladder().fit(dev_munich).ultimate_

    # Plot data
    fig, (ax0, ax1) = plt.subplots(ncols=2, sharex=True, figsize=(10,5))
    plot_kw = dict(kind='bar', grid=True, color=('blue', 'green'), alpha=0.7)

    plot1_data = cl_munich.to_frame().T.rename(
        {'incurred':'Ultimate Incurred', 'paid': 'Ultimate Paid'}, axis=1)

    plot2_data = pd.concat(
        ((cl_munich['paid'] / cl_munich['incurred']).rename(
            'columns', ['Munich']).to_frame(),
         (cl_traditional['paid'] / cl_traditional['incurred']).rename(
             'columns', ['Traditional']).to_frame()), axis=1)

    plot1_data.plot(
        title='Munich Chainladder', ax=ax0, **plot_kw).set(
        ylabel='Ultimate', xlabel='Accident Year')
    plot2_data.plot(
        title='P/I Ratio Comparison', ax=ax1, ylim=(0,1.25), **plot_kw).set(
        ylabel='Paid Ultimate / Incurred Ultimate', xlabel='Accident Year');


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.655 seconds)


.. _sphx_glr_download_auto_examples_plot_munich.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_munich.py <plot_munich.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_munich.ipynb <plot_munich.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
